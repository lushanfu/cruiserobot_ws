// Generated by gencpp from file robotrun/moving_arm.msg
// DO NOT EDIT!


#ifndef ROBOTRUN_MESSAGE_MOVING_ARM_H
#define ROBOTRUN_MESSAGE_MOVING_ARM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotrun
{
template <class ContainerAllocator>
struct moving_arm_
{
  typedef moving_arm_<ContainerAllocator> Type;

  moving_arm_()
    : hArmBagNum(0)
    , movingArmBagNum(0)
    , hIOLine_1(0)
    , hIOLine_2(0)
    , vIOLine(0)
    , hArmOnLineLock(0)
    , hArmOnLineUnlock(0)
    , hRotateAngle(0)
    , speed(0)
    , hTorsion(0)
    , vRorateAngle(0)
    , opArmDistance(0)
    , stayWiresDis(0)  {
    }
  moving_arm_(const ContainerAllocator& _alloc)
    : hArmBagNum(0)
    , movingArmBagNum(0)
    , hIOLine_1(0)
    , hIOLine_2(0)
    , vIOLine(0)
    , hArmOnLineLock(0)
    , hArmOnLineUnlock(0)
    , hRotateAngle(0)
    , speed(0)
    , hTorsion(0)
    , vRorateAngle(0)
    , opArmDistance(0)
    , stayWiresDis(0)  {
  (void)_alloc;
    }



   typedef int64_t _hArmBagNum_type;
  _hArmBagNum_type hArmBagNum;

   typedef int64_t _movingArmBagNum_type;
  _movingArmBagNum_type movingArmBagNum;

   typedef int64_t _hIOLine_1_type;
  _hIOLine_1_type hIOLine_1;

   typedef int64_t _hIOLine_2_type;
  _hIOLine_2_type hIOLine_2;

   typedef int64_t _vIOLine_type;
  _vIOLine_type vIOLine;

   typedef int64_t _hArmOnLineLock_type;
  _hArmOnLineLock_type hArmOnLineLock;

   typedef int64_t _hArmOnLineUnlock_type;
  _hArmOnLineUnlock_type hArmOnLineUnlock;

   typedef int64_t _hRotateAngle_type;
  _hRotateAngle_type hRotateAngle;

   typedef int64_t _speed_type;
  _speed_type speed;

   typedef int64_t _hTorsion_type;
  _hTorsion_type hTorsion;

   typedef int64_t _vRorateAngle_type;
  _vRorateAngle_type vRorateAngle;

   typedef int64_t _opArmDistance_type;
  _opArmDistance_type opArmDistance;

   typedef int64_t _stayWiresDis_type;
  _stayWiresDis_type stayWiresDis;





  typedef boost::shared_ptr< ::robotrun::moving_arm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotrun::moving_arm_<ContainerAllocator> const> ConstPtr;

}; // struct moving_arm_

typedef ::robotrun::moving_arm_<std::allocator<void> > moving_arm;

typedef boost::shared_ptr< ::robotrun::moving_arm > moving_armPtr;
typedef boost::shared_ptr< ::robotrun::moving_arm const> moving_armConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotrun::moving_arm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotrun::moving_arm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robotrun

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robotrun': ['/home/lsf/LSF/cruiserobot_ws/src/robotrun/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robotrun::moving_arm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotrun::moving_arm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotrun::moving_arm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotrun::moving_arm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotrun::moving_arm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotrun::moving_arm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotrun::moving_arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b792f6978c8450748856eee9a6a014b";
  }

  static const char* value(const ::robotrun::moving_arm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b792f6978c84507ULL;
  static const uint64_t static_value2 = 0x48856eee9a6a014bULL;
};

template<class ContainerAllocator>
struct DataType< ::robotrun::moving_arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotrun/moving_arm";
  }

  static const char* value(const ::robotrun::moving_arm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotrun::moving_arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 hArmBagNum\n\
int64 movingArmBagNum\n\
int64 hIOLine_1\n\
int64 hIOLine_2\n\
int64 vIOLine\n\
int64 hArmOnLineLock\n\
int64 hArmOnLineUnlock\n\
int64 hRotateAngle\n\
int64 speed\n\
int64 hTorsion\n\
int64 vRorateAngle\n\
int64 opArmDistance\n\
int64 stayWiresDis\n\
";
  }

  static const char* value(const ::robotrun::moving_arm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotrun::moving_arm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hArmBagNum);
      stream.next(m.movingArmBagNum);
      stream.next(m.hIOLine_1);
      stream.next(m.hIOLine_2);
      stream.next(m.vIOLine);
      stream.next(m.hArmOnLineLock);
      stream.next(m.hArmOnLineUnlock);
      stream.next(m.hRotateAngle);
      stream.next(m.speed);
      stream.next(m.hTorsion);
      stream.next(m.vRorateAngle);
      stream.next(m.opArmDistance);
      stream.next(m.stayWiresDis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moving_arm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotrun::moving_arm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotrun::moving_arm_<ContainerAllocator>& v)
  {
    s << indent << "hArmBagNum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hArmBagNum);
    s << indent << "movingArmBagNum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.movingArmBagNum);
    s << indent << "hIOLine_1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hIOLine_1);
    s << indent << "hIOLine_2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hIOLine_2);
    s << indent << "vIOLine: ";
    Printer<int64_t>::stream(s, indent + "  ", v.vIOLine);
    s << indent << "hArmOnLineLock: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hArmOnLineLock);
    s << indent << "hArmOnLineUnlock: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hArmOnLineUnlock);
    s << indent << "hRotateAngle: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hRotateAngle);
    s << indent << "speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.speed);
    s << indent << "hTorsion: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hTorsion);
    s << indent << "vRorateAngle: ";
    Printer<int64_t>::stream(s, indent + "  ", v.vRorateAngle);
    s << indent << "opArmDistance: ";
    Printer<int64_t>::stream(s, indent + "  ", v.opArmDistance);
    s << indent << "stayWiresDis: ";
    Printer<int64_t>::stream(s, indent + "  ", v.stayWiresDis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTRUN_MESSAGE_MOVING_ARM_H
