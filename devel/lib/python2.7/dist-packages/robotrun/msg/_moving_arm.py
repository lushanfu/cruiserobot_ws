# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotrun/moving_arm.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class moving_arm(genpy.Message):
  _md5sum = "9b792f6978c8450748856eee9a6a014b"
  _type = "robotrun/moving_arm"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 hArmBagNum
int64 movingArmBagNum
int64 hIOLine_1
int64 hIOLine_2
int64 vIOLine
int64 hArmOnLineLock
int64 hArmOnLineUnlock
int64 hRotateAngle
int64 speed
int64 hTorsion
int64 vRorateAngle
int64 opArmDistance
int64 stayWiresDis
"""
  __slots__ = ['hArmBagNum','movingArmBagNum','hIOLine_1','hIOLine_2','vIOLine','hArmOnLineLock','hArmOnLineUnlock','hRotateAngle','speed','hTorsion','vRorateAngle','opArmDistance','stayWiresDis']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hArmBagNum,movingArmBagNum,hIOLine_1,hIOLine_2,vIOLine,hArmOnLineLock,hArmOnLineUnlock,hRotateAngle,speed,hTorsion,vRorateAngle,opArmDistance,stayWiresDis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(moving_arm, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.hArmBagNum is None:
        self.hArmBagNum = 0
      if self.movingArmBagNum is None:
        self.movingArmBagNum = 0
      if self.hIOLine_1 is None:
        self.hIOLine_1 = 0
      if self.hIOLine_2 is None:
        self.hIOLine_2 = 0
      if self.vIOLine is None:
        self.vIOLine = 0
      if self.hArmOnLineLock is None:
        self.hArmOnLineLock = 0
      if self.hArmOnLineUnlock is None:
        self.hArmOnLineUnlock = 0
      if self.hRotateAngle is None:
        self.hRotateAngle = 0
      if self.speed is None:
        self.speed = 0
      if self.hTorsion is None:
        self.hTorsion = 0
      if self.vRorateAngle is None:
        self.vRorateAngle = 0
      if self.opArmDistance is None:
        self.opArmDistance = 0
      if self.stayWiresDis is None:
        self.stayWiresDis = 0
    else:
      self.hArmBagNum = 0
      self.movingArmBagNum = 0
      self.hIOLine_1 = 0
      self.hIOLine_2 = 0
      self.vIOLine = 0
      self.hArmOnLineLock = 0
      self.hArmOnLineUnlock = 0
      self.hRotateAngle = 0
      self.speed = 0
      self.hTorsion = 0
      self.vRorateAngle = 0
      self.opArmDistance = 0
      self.stayWiresDis = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13q().pack(_x.hArmBagNum, _x.movingArmBagNum, _x.hIOLine_1, _x.hIOLine_2, _x.vIOLine, _x.hArmOnLineLock, _x.hArmOnLineUnlock, _x.hRotateAngle, _x.speed, _x.hTorsion, _x.vRorateAngle, _x.opArmDistance, _x.stayWiresDis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.hArmBagNum, _x.movingArmBagNum, _x.hIOLine_1, _x.hIOLine_2, _x.vIOLine, _x.hArmOnLineLock, _x.hArmOnLineUnlock, _x.hRotateAngle, _x.speed, _x.hTorsion, _x.vRorateAngle, _x.opArmDistance, _x.stayWiresDis,) = _get_struct_13q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13q().pack(_x.hArmBagNum, _x.movingArmBagNum, _x.hIOLine_1, _x.hIOLine_2, _x.vIOLine, _x.hArmOnLineLock, _x.hArmOnLineUnlock, _x.hRotateAngle, _x.speed, _x.hTorsion, _x.vRorateAngle, _x.opArmDistance, _x.stayWiresDis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.hArmBagNum, _x.movingArmBagNum, _x.hIOLine_1, _x.hIOLine_2, _x.vIOLine, _x.hArmOnLineLock, _x.hArmOnLineUnlock, _x.hRotateAngle, _x.speed, _x.hTorsion, _x.vRorateAngle, _x.opArmDistance, _x.stayWiresDis,) = _get_struct_13q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13q = None
def _get_struct_13q():
    global _struct_13q
    if _struct_13q is None:
        _struct_13q = struct.Struct("<13q")
    return _struct_13q
