# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotrun/robot_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robotrun.msg

class robot_data(genpy.Message):
  _md5sum = "06f2154602946c9906cdc04acafe2b9f"
  _type = "robotrun/robot_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """moving_arm movingArmData
fixed_arm  fixedArmData
================================================================================
MSG: robotrun/moving_arm
int64 hArmBagNum
int64 movingArmBagNum
int64 hIOLine_1
int64 hIOLine_2
int64 vIOLine
int64 hArmOnLineLock
int64 hArmOnLineUnlock
int64 hRotateAngle
int64 speed
int64 hTorsion
int64 vRorateAngle
int64 opArmDistance
int64 stayWiresDis

================================================================================
MSG: robotrun/fixed_arm
int64 hArmBagNum
int64 movingArmBagNum
int64 hIOLine_1
int64 hIOLine_2
int64 vIOLine
int64 hArmOnLineLock
int64 hArmOnLineUnlock
int64 hRotateAngle
int64 speed
int64 hTorsion
int64 vRorateAngle
int64 opArmDistance
int64 controlCabinetBagNum
int64 controlCabinetStayWireSensorDis
int64 gps
int64 batteryCapcity

"""
  __slots__ = ['movingArmData','fixedArmData']
  _slot_types = ['robotrun/moving_arm','robotrun/fixed_arm']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       movingArmData,fixedArmData

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.movingArmData is None:
        self.movingArmData = robotrun.msg.moving_arm()
      if self.fixedArmData is None:
        self.fixedArmData = robotrun.msg.fixed_arm()
    else:
      self.movingArmData = robotrun.msg.moving_arm()
      self.fixedArmData = robotrun.msg.fixed_arm()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_29q().pack(_x.movingArmData.hArmBagNum, _x.movingArmData.movingArmBagNum, _x.movingArmData.hIOLine_1, _x.movingArmData.hIOLine_2, _x.movingArmData.vIOLine, _x.movingArmData.hArmOnLineLock, _x.movingArmData.hArmOnLineUnlock, _x.movingArmData.hRotateAngle, _x.movingArmData.speed, _x.movingArmData.hTorsion, _x.movingArmData.vRorateAngle, _x.movingArmData.opArmDistance, _x.movingArmData.stayWiresDis, _x.fixedArmData.hArmBagNum, _x.fixedArmData.movingArmBagNum, _x.fixedArmData.hIOLine_1, _x.fixedArmData.hIOLine_2, _x.fixedArmData.vIOLine, _x.fixedArmData.hArmOnLineLock, _x.fixedArmData.hArmOnLineUnlock, _x.fixedArmData.hRotateAngle, _x.fixedArmData.speed, _x.fixedArmData.hTorsion, _x.fixedArmData.vRorateAngle, _x.fixedArmData.opArmDistance, _x.fixedArmData.controlCabinetBagNum, _x.fixedArmData.controlCabinetStayWireSensorDis, _x.fixedArmData.gps, _x.fixedArmData.batteryCapcity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.movingArmData is None:
        self.movingArmData = robotrun.msg.moving_arm()
      if self.fixedArmData is None:
        self.fixedArmData = robotrun.msg.fixed_arm()
      end = 0
      _x = self
      start = end
      end += 232
      (_x.movingArmData.hArmBagNum, _x.movingArmData.movingArmBagNum, _x.movingArmData.hIOLine_1, _x.movingArmData.hIOLine_2, _x.movingArmData.vIOLine, _x.movingArmData.hArmOnLineLock, _x.movingArmData.hArmOnLineUnlock, _x.movingArmData.hRotateAngle, _x.movingArmData.speed, _x.movingArmData.hTorsion, _x.movingArmData.vRorateAngle, _x.movingArmData.opArmDistance, _x.movingArmData.stayWiresDis, _x.fixedArmData.hArmBagNum, _x.fixedArmData.movingArmBagNum, _x.fixedArmData.hIOLine_1, _x.fixedArmData.hIOLine_2, _x.fixedArmData.vIOLine, _x.fixedArmData.hArmOnLineLock, _x.fixedArmData.hArmOnLineUnlock, _x.fixedArmData.hRotateAngle, _x.fixedArmData.speed, _x.fixedArmData.hTorsion, _x.fixedArmData.vRorateAngle, _x.fixedArmData.opArmDistance, _x.fixedArmData.controlCabinetBagNum, _x.fixedArmData.controlCabinetStayWireSensorDis, _x.fixedArmData.gps, _x.fixedArmData.batteryCapcity,) = _get_struct_29q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_29q().pack(_x.movingArmData.hArmBagNum, _x.movingArmData.movingArmBagNum, _x.movingArmData.hIOLine_1, _x.movingArmData.hIOLine_2, _x.movingArmData.vIOLine, _x.movingArmData.hArmOnLineLock, _x.movingArmData.hArmOnLineUnlock, _x.movingArmData.hRotateAngle, _x.movingArmData.speed, _x.movingArmData.hTorsion, _x.movingArmData.vRorateAngle, _x.movingArmData.opArmDistance, _x.movingArmData.stayWiresDis, _x.fixedArmData.hArmBagNum, _x.fixedArmData.movingArmBagNum, _x.fixedArmData.hIOLine_1, _x.fixedArmData.hIOLine_2, _x.fixedArmData.vIOLine, _x.fixedArmData.hArmOnLineLock, _x.fixedArmData.hArmOnLineUnlock, _x.fixedArmData.hRotateAngle, _x.fixedArmData.speed, _x.fixedArmData.hTorsion, _x.fixedArmData.vRorateAngle, _x.fixedArmData.opArmDistance, _x.fixedArmData.controlCabinetBagNum, _x.fixedArmData.controlCabinetStayWireSensorDis, _x.fixedArmData.gps, _x.fixedArmData.batteryCapcity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.movingArmData is None:
        self.movingArmData = robotrun.msg.moving_arm()
      if self.fixedArmData is None:
        self.fixedArmData = robotrun.msg.fixed_arm()
      end = 0
      _x = self
      start = end
      end += 232
      (_x.movingArmData.hArmBagNum, _x.movingArmData.movingArmBagNum, _x.movingArmData.hIOLine_1, _x.movingArmData.hIOLine_2, _x.movingArmData.vIOLine, _x.movingArmData.hArmOnLineLock, _x.movingArmData.hArmOnLineUnlock, _x.movingArmData.hRotateAngle, _x.movingArmData.speed, _x.movingArmData.hTorsion, _x.movingArmData.vRorateAngle, _x.movingArmData.opArmDistance, _x.movingArmData.stayWiresDis, _x.fixedArmData.hArmBagNum, _x.fixedArmData.movingArmBagNum, _x.fixedArmData.hIOLine_1, _x.fixedArmData.hIOLine_2, _x.fixedArmData.vIOLine, _x.fixedArmData.hArmOnLineLock, _x.fixedArmData.hArmOnLineUnlock, _x.fixedArmData.hRotateAngle, _x.fixedArmData.speed, _x.fixedArmData.hTorsion, _x.fixedArmData.vRorateAngle, _x.fixedArmData.opArmDistance, _x.fixedArmData.controlCabinetBagNum, _x.fixedArmData.controlCabinetStayWireSensorDis, _x.fixedArmData.gps, _x.fixedArmData.batteryCapcity,) = _get_struct_29q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_29q = None
def _get_struct_29q():
    global _struct_29q
    if _struct_29q is None:
        _struct_29q = struct.Struct("<29q")
    return _struct_29q
